package fr.gouv.cacem.monitorenv.infrastructure.database.repositories

import fr.gouv.cacem.monitorenv.domain.entities.controlResources.ControlResourceEntity
import fr.gouv.cacem.monitorenv.domain.entities.controlResources.ControlUnitEntity
import fr.gouv.cacem.monitorenv.domain.entities.missions.*
import fr.gouv.cacem.monitorenv.domain.exceptions.ControlResourceOrUnitNotFoundException
import org.assertj.core.api.Assertions.assertThat
import org.assertj.core.api.Assertions.catchThrowable
import org.junit.jupiter.api.Test
import org.locationtech.jts.geom.MultiPolygon
import org.locationtech.jts.io.WKTReader
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Pageable
import org.springframework.transaction.annotation.Transactional
import java.time.ZonedDateTime
import java.util.*

class JpaMissionRepositoryITests : AbstractDBTests() {

    @Autowired
    private lateinit var jpaMissionRepository: JpaMissionRepository

    @Test
    @Transactional
    fun `save should create a new mission`() {
        // Given
        val existingMissions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T10:54:00Z").toInstant(),
            startedBefore = ZonedDateTime.parse("2022-08-08T00:00:00Z").toInstant(),
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )

        assertThat(existingMissions).hasSize(21)

        val newMission = MissionEntity(
            missionType = MissionTypeEnum.SEA,
            startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
            isClosed = false,
            isDeleted = false,
            missionSource = MissionSourceEnum.MONITORENV,
            controlUnits = listOf(
                ControlUnitEntity(
                    id = 10006,
                    name = "DPM – DDTM 35",
                    administration = "DDTM",
                    isArchived = false,
                    resources = listOf(ControlResourceEntity(id = 8, name = "PAM Jeanne Barret"))
                )
            )
        )

        // When
        val newMissionCreated = jpaMissionRepository.save(newMission)

        // Then
        assertThat(newMissionCreated.controlUnits).hasSize(1)
        assertThat(newMissionCreated.controlUnits.first().id).isEqualTo(10006)
        assertThat(newMissionCreated.controlUnits.first().name).isEqualTo("DPM – DDTM 35")
        assertThat(newMissionCreated.controlUnits.first().administration).isEqualTo("DDTM")
        assertThat(newMissionCreated.controlUnits.first().resources).hasSize(1)
        assertThat(newMissionCreated.controlUnits.first().resources.first().id).isEqualTo(8)
        assertThat(newMissionCreated.controlUnits.first().resources.first().name).isEqualTo("PAM Jeanne Barret")

        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T10:54:00Z").toInstant(),
            startedBefore = ZonedDateTime.parse("2022-08-08T00:00:00Z").toInstant(),
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )

        assertThat(missions).hasSize(22)
    }

    @Test
    @Transactional
    fun `save should update mission resources`() {
        // Given
        val newMission = MissionEntity(
                missionType = MissionTypeEnum.SEA,
                startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
                isClosed = false,
                isDeleted = false,
                missionSource = MissionSourceEnum.MONITORENV,
                controlUnits = listOf(
                        ControlUnitEntity(
                                id = 10006,
                                name = "DPM – DDTM 35",
                                administration = "DDTM",
                                isArchived = false,
                                resources = listOf(ControlResourceEntity(id = 8, name = "PAM Jeanne Barret"))
                        )
                )
        )
        jpaMissionRepository.save(newMission)

        // When
        val newMissionUpdated = jpaMissionRepository.save(newMission.copy(controlUnits = listOf(
                ControlUnitEntity(
                        id = 10006,
                        name = "DPM – DDTM 35",
                        administration = "DDTM",
                        isArchived = false,
                        resources = listOf(
                                ControlResourceEntity(id = 8, name = "PAM Jeanne Barret"),
                                ControlResourceEntity(id = 5, name = "Voiture"))
                )
        )))

        // Then
        assertThat(newMissionUpdated.controlUnits).hasSize(1)
        assertThat(newMissionUpdated.controlUnits.first().id).isEqualTo(10006)
        assertThat(newMissionUpdated.controlUnits.first().name).isEqualTo("DPM – DDTM 35")
        assertThat(newMissionUpdated.controlUnits.first().administration).isEqualTo("DDTM")
        assertThat(newMissionUpdated.controlUnits.first().resources).hasSize(2)
        assertThat(newMissionUpdated.controlUnits.first().resources.first().id).isEqualTo(8)
        assertThat(newMissionUpdated.controlUnits.first().resources.first().name).isEqualTo("PAM Jeanne Barret")
        assertThat(newMissionUpdated.controlUnits.first().resources.last().id).isEqualTo(5)
        assertThat(newMissionUpdated.controlUnits.first().resources.last().name).isEqualTo("Voiture")
    }

    @Test
    @Transactional
    fun `save should throw an exception When the resource id is not found`() {
        // Given
        val newMission = MissionEntity(
            missionType = MissionTypeEnum.SEA,
            startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
            isClosed = false,
            isDeleted = false,
            missionSource = MissionSourceEnum.MONITORENV,
            controlUnits = listOf(
                ControlUnitEntity(
                    id = 10006,
                    name = "DPM – DDTM 35",
                    administration = "DDTM",
                    isArchived = false,
                    resources = listOf(ControlResourceEntity(id = 123456, name = "PAM Jeanne Barret"))
                )
            )
        )

        // When
        val throwable = catchThrowable {
            jpaMissionRepository.save(newMission)
        }

        // Then
        assertThat(throwable).isInstanceOf(ControlResourceOrUnitNotFoundException::class.java)
        assertThat(throwable.message).contains("Invalid control unit or resource id: not found in referential")
    }

    @Test
    @Transactional
    fun `save should throw an exception When the unit id is not found`() {
        // Given
        val newMission = MissionEntity(
            missionType = MissionTypeEnum.SEA,
            startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
            isClosed = false,
            isDeleted = false,
            missionSource = MissionSourceEnum.MONITORENV,
            controlUnits = listOf(ControlUnitEntity(id = 123456, name = "PAM Jeanne Barret", administration = "", isArchived = false, resources = listOf()))
        )

        // When
        val throwable = catchThrowable {
            jpaMissionRepository.save(newMission)
        }

        // Then
        assertThat(throwable).isInstanceOf(ControlResourceOrUnitNotFoundException::class.java)
        assertThat(throwable.message).contains("Invalid control unit or resource id: not found in referential")
    }

    @Test
    @Transactional
    fun `findAllMissions Should return all missions when only required startedAfter is set to a very old date`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(50)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when startedAfter & startedBefore are set`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T10:54:00Z").toInstant(),
            startedBefore = ZonedDateTime.parse("2022-08-08T00:00:00Z").toInstant(),
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(21)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when missionNatures is set`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = listOf("ENV"),
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(26)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when multiple missionNatures are set`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = listOf("ENV", "FISH"),
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(43)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when missionTypes is set`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = listOf("SEA"),
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(18)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when multiple missionTypes are set`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = listOf("SEA", "LAND"),
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(41)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when status is set to UPCOMING`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = listOf("UPCOMING"),
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(6)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when status is set to PENDING`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = listOf("PENDING"),
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(20)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when status is set to ENDED`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = listOf("ENDED"),
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(12)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when status is set to CLOSED`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = listOf("CLOSED"),
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(18)
    }

    @Test
    @Transactional
    fun `findAllMissions Should return filtered missions when status is set to CLOSED or UPCOMING`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = listOf("CLOSED", "UPCOMING"),
            pageable = Pageable.unpaged()
        )
        assertThat(missions).hasSize(24)
    }

    @Test
    @Transactional
    fun `findAllMissions with pagenumber and pagesize Should return subset of missions`() {
        // When
        val missions = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2000-01-01T00:01:00Z").toInstant(),
            startedBefore = null,
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = PageRequest.of(1, 10)
        )
        assertThat(missions).hasSize(10)
    }

    @Test
    @Transactional
    fun `findMission Should return specified mission`() {
        // When
        val wktReader = WKTReader()
        val multipolygonString
        val polygon = wktReader.read(multipolygonString) as MultiPolygon
        val firstMission = MissionEntity(
            id = 10,
            missionType = MissionTypeEnum.LAND,
            missionNature = listOf(MissionNatureEnum.ENV, MissionNatureEnum.FISH),
            openBy = "Kimberly Smith",
            closedBy = "Travis Carter",
            facade = "NAMO",
            observationsCacem = "Remain vote several ok. Bring American play woman challenge. Throw low law positive seven.",
            startDateTimeUtc = ZonedDateTime.parse("2022-03-21T12:11:13Z"),
            endDateTimeUtc = null,
            geom = polygon,
            isClosed = false,
            isDeleted = false,
            envActions = listOf(),
            missionSource = MissionSourceEnum.MONITORENV,
            controlUnits = listOf(
                ControlUnitEntity(
                    id = 10003,
                    administration = "DDTM",
                    isArchived = false,
                    name = "DML 2A",
                    resources = listOf(
                        ControlResourceEntity(id = 3, name = "Semi-rigide 1"),
                        ControlResourceEntity(id = 4, name = "Semi-rigide 2"),
                        ControlResourceEntity(id = 5, name = "Voiture")
                    ),
                    contact = null
                )
            )
        )
        val mission = jpaMissionRepository.findMissionById(10)

        assertThat(mission).isEqualTo(firstMission)
    }

    @Test
    @Transactional
    fun `findMission Should return specified mission and associated env actions`() {
        // When
        val mission = jpaMissionRepository.findMissionById(34)
        assertThat(mission.id).isEqualTo(34)
        assertThat(mission.envActions).hasSize(2)
    }

    @Test
    @Transactional
    fun `save Should update mission`() {
        // Given
        val wktReader = WKTReader()
        val multipolygonString =
            "MULTIPOLYGON (((-4.54877816747593 48.305559876971, -4.54997332394943 48.3059760121399, -4.54998501370013 48.3071882334181, -4.54879290083417 48.3067746138142, -4.54877816747593 48.305559876971)))"
        val polygon = wktReader.read(multipolygonString) as MultiPolygon
        val infraction = InfractionEntity(
            id = UUID.randomUUID().toString(),
            natinf = listOf("53432"),
            observations = "This is an infraction",
            registrationNumber = "REGISTRATION NUM",
            companyName = "ACME inc.",
            relevantCourt = "MARITIME_COURT",
            infractionType = InfractionTypeEnum.WITHOUT_REPORT,
            formalNotice = FormalNoticeEnum.NO,
            toProcess = false,
            controlledPersonIdentity = "Dick Hoover",
            vesselType = VesselTypeEnum.FISHING,
            vesselSize = VesselSizeEnum.FROM_12_TO_24m
        )
        val controlAction = EnvActionControlEntity(
            id = UUID.randomUUID(),
            themes = listOf(ThemeEntity(theme="5", subThemes = listOf("4"), protectedSpecies = listOf("5"))),
            actionNumberOfControls = 12,
            actionTargetType = ActionTargetTypeEnum.VEHICLE,
            vehicleType = VehicleTypeEnum.VESSEL,
            infractions = listOf(infraction)
        )
        val surveillanceAction = EnvActionSurveillanceEntity(
            id = UUID.randomUUID(),
            themes = listOf(ThemeEntity(theme="6", subThemes = listOf("7"), protectedSpecies = listOf("8"))),
            duration = 3.4,
            observations = "This is a surveillance action"
        )
        val noteAction = EnvActionNoteEntity(
            id = UUID.randomUUID(),
            observations = "This is a note"
        )

        val expectedUpdatedMission = MissionEntity(
            id = 10,
            missionType = MissionTypeEnum.LAND,
            missionNature = listOf(MissionNatureEnum.FISH, MissionNatureEnum.ENV),
            openBy = "John Smith",
            closedBy = "Carol Tim",
            facade = "MEMN",
            geom = polygon,
            observationsCacem = null,
            observationsCnsp = null,
            startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
            endDateTimeUtc = ZonedDateTime.parse("2022-01-23T20:29:03Z"),
            isClosed = false,
            isDeleted = false,
            envActions = listOf(controlAction, surveillanceAction, noteAction),
            missionSource = MissionSourceEnum.MONITORENV
        )
        // When
        jpaMissionRepository.save(expectedUpdatedMission)
        assertThat(jpaMissionRepository.findMissionById(10)).isEqualTo(expectedUpdatedMission)
    }

    @Test
    @Transactional
    fun `save Should update mission with associated envActions`() {
        // Given
        val wktReader = WKTReader()
        val multipolygonString =
            "MULTIPOLYGON (((-4.54877816747593 48.305559876971, -4.54997332394943 48.3059760121399, -4.54998501370013 48.3071882334181, -4.54879290083417 48.3067746138142, -4.54877816747593 48.305559876971)))"
        val polygon = wktReader.read(multipolygonString) as MultiPolygon

        val envAction = EnvActionControlEntity(
            id = UUID.fromString("bf9f4062-83d3-4a85-b89b-76c0ded6473d"),
            actionTargetType = ActionTargetTypeEnum.VEHICLE,
            vehicleType = VehicleTypeEnum.VESSEL,
            actionNumberOfControls = 4
        )
        val expectedUpdatedMission = MissionEntity(
            id = 10,
            missionType = MissionTypeEnum.LAND,
            missionNature = listOf(MissionNatureEnum.FISH, MissionNatureEnum.ENV),
            facade = "NAMO",
            geom = polygon,
            observationsCacem = null,
            observationsCnsp = null,
            startDateTimeUtc = ZonedDateTime.parse("2022-01-15T04:50:09Z"),
            endDateTimeUtc = ZonedDateTime.parse("2022-01-23T20:29:03Z"),
            isClosed = false,
            isDeleted = false,
            envActions = listOf(envAction),
            missionSource = MissionSourceEnum.MONITORENV
        )
        // When
        jpaMissionRepository.save(expectedUpdatedMission)
        val updatedMission = jpaMissionRepository.findMissionById(10)
        assertThat(updatedMission).isEqualTo(expectedUpdatedMission)
    }

    @Test
    @Transactional
    fun `delete Should set the deleted flag as true`() {
        // Given
        val missionsList = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T10:54:00Z").toInstant(),
            startedBefore = ZonedDateTime.parse("2022-08-08T00:00:00Z").toInstant(),
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(missionsList).hasSize(21)

        // When
        jpaMissionRepository.delete(3)

        // Then
        val nextMissionList = jpaMissionRepository.findAllMissions(
            startedAfter = ZonedDateTime.parse("2022-01-01T10:54:00Z").toInstant(),
            startedBefore = ZonedDateTime.parse("2022-08-08T00:00:00Z").toInstant(),
            missionNatures = null,
            missionTypes = null,
            missionStatuses = null,
            pageable = Pageable.unpaged()
        )
        assertThat(nextMissionList).hasSize(20)
    }
}
